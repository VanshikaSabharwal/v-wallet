generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int                 @id @default(autoincrement())
  name              String?
  email             String              @unique
  number            String              @unique
  password          String
  OnRampTransaction OnRampTransaction[]
  Balance           Balance[]
  sentTransfers     p2pTransfer[]       @relation(name: "FromUserRelation")
  receivedTransfers p2pTransfer[]       @relation(name: "ToUserRelation")
  OnPeerTransaction OnPeerTransaction[]
  fromPeerUser      OnPeerTransaction[] @relation(name: "fromPeer")
  toPeerUser        OnPeerTransaction[] @relation(name: "toPeer")

  @@index([email])
  @@index([number])
}

model p2pTransfer {
  id         Int      @id @default(autoincrement())
  amount     Int
  timestamp  DateTime  @default(now())
  fromUserId Int
  toUserId   Int
  fromUser   User     @relation(name: "FromUserRelation", fields: [fromUserId], references: [id])
  toUser     User     @relation(name: "ToUserRelation", fields: [toUserId], references: [id])

  @@index([fromUserId])
  @@index([toUserId])
  @@index([timestamp])
}

model OnPeerTransaction {
  id         Int      @id @default(autoincrement())
  amount     Int
  timestamp  DateTime @default(now())
  fromPeerId Int
  toPeerId   Int
  userId     Int?
  fromPeer   User     @relation(name: "fromPeer", fields: [fromPeerId], references: [id])
  toPeer     User     @relation(name: "toPeer", fields: [toPeerId], references: [id])
  User       User?    @relation(fields: [userId], references: [id])

  @@index([fromPeerId])
  @@index([toPeerId])
  @@index([timestamp])
}

model OnRampTransaction {
  id        Int          @id @default(autoincrement())
  status    OnRampStatus
  token     String       @unique
  provider  String
  amount    Int
  startTime DateTime
  userId    Int
  user      User         @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([status])
  @@index([startTime])
}

model Balance {
  id     Int  @id @default(autoincrement())
  userId Int  @unique
  amount Int
  locked Int
  user   User @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Merchant {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String?
  auth_type AuthType

  @@index([email])
  @@index([auth_type])
}

model Otp {
  id        Int      @id @default(autoincrement())
  email     String
  phone     String
  otp       String
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([email])
  @@index([phone])
  @@index([expiresAt])
}

model Transaction {
  id          String   @id @default(cuid())
  paymentId   String
  method      String
  amount      Float
  currency    String
  status      String
  createdAt   DateTime @default(now())

  @@index([paymentId])
  @@index([status])
  @@index([createdAt])
}


enum AuthType {
  Google
  Github
}

enum OnRampStatus {
  Success
  Failure
  Processing
}
